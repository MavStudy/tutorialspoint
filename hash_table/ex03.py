# coding=utf-8
"""
Python-Hash Table

Hash tables are a type of data structure in which the address or the index
value of the data element is generated from a hash function. That makes
accessing the data faster as the index value behaves as a key for the data
value. In other words Hash table stores key-value pairs but the key is
generated through a hashing function.

So the search and insertion function of a data element becomes much faster as
the key values themselves become the index of the array which stores the data.

In Python, the Dictionary data types represent the implementation of hash
tables. The Keys in the dictionary satisfy the following requirements.

• The keys of the dictionary are hashable i.e. the are generated by hashing
  function which generates unique result for each unique value supplied to
  the hash function.

• The order of data elements in a dictionary is not fixed.

So we see the implementation of hash table by using the dictionary data types
as below.

https://www.tutorialspoint.com/python_data_structure/python_hash_table.htm

"""


def main():

    """
    Delete Dictionary Elements

    You can either remove individual dictionary elements or clear the entire
    contents of a dictionary. You can also delete entire dictionary in a single
    operation.To explicitly remove an entire dictionary, just use the del
    statement.

    :return:
    """
    # Declare a dictionary
    dict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'}

    del dict['Name']  # remove entry with key 'Name'
    dict.clear()  # remove all entries in dict
    del dict  # delete entire dictionary

    print("dict['Age']: ", dict['Age'])
    print("dict['School']: ", dict['School'])


if __name__ == '__main__':
    main()
"""
This produces the following result. Note that an exception is raised because 
after del dict dictionary does not exist anymore.

Traceback (most recent call last):
  File "hash_table\ex03.py", line 55, in <module>
    main()
  File "hash_table\ex03.py", line 50, in main
    print("dict['Age']: ", dict['Age'])
UnboundLocalError: local variable 'dict' referenced before assignment
"""
